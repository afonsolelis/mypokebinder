#!/usr/bin/env python3
"""
Script de inicializa√ß√£o para MyPublicPokeBinder
Vers√£o p√∫blica que n√£o requer login
"""

import os
import sys
import subprocess
from pathlib import Path

def check_python_version():
    """Verifica se a vers√£o do Python √© compat√≠vel"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    return True

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas"""
    try:
        import streamlit
        import supabase
        import cloudinary
        print("‚úÖ Depend√™ncias Python OK")
        return True
    except ImportError as e:
        print(f"‚ùå Depend√™ncia faltando: {e}")
        print("üì¶ Execute: pip install -r requirements.txt")
        return False

def check_env_file():
    """Verifica se o arquivo .env existe"""
    env_file = Path(".env")
    if not env_file.exists():
        print("‚ùå Arquivo .env n√£o encontrado")
        print("üìã Copie env.example para .env e configure suas credenciais")
        return False
    print("‚úÖ Arquivo .env encontrado")
    return True

def check_supabase_connection():
    """Testa conex√£o com Supabase"""
    try:
        from config import supabase
        # Teste simples de conex√£o
        result = supabase.table('cards').select('id').limit(1).execute()
        print("‚úÖ Conex√£o com Supabase OK")
        return True
    except Exception as e:
        print(f"‚ùå Erro na conex√£o com Supabase: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üé¥ MyPublicPokeBinder - Vers√£o P√∫blica")
    print("=" * 50)
    
    # Verifica√ß√µes
    checks = [
        check_python_version(),
        check_dependencies(),
        check_env_file(),
        check_supabase_connection()
    ]
    
    if not all(checks):
        print("\n‚ùå Verifica√ß√µes falharam. Corrija os problemas acima.")
        return
    
    print("\n‚úÖ Todas as verifica√ß√µes passaram!")
    print("üöÄ Iniciando MyPublicPokeBinder...")
    print("=" * 50)
    
    # Iniciar aplica√ß√£o
    try:
        subprocess.run([
            sys.executable, "-m", "streamlit", "run", "public_app.py",
            "--server.port", "8502",
            "--server.address", "localhost"
        ])
    except KeyboardInterrupt:
        print("\nüëã Aplica√ß√£o encerrada pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro ao iniciar aplica√ß√£o: {e}")

if __name__ == "__main__":
    main()
