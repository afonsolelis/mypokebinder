import streamlit as st
import os
from datetime import datetime
from config import supabase, STREAMLIT_CONFIG

# Configura칞칚o da p치gina
st.set_page_config(
    page_title="MyPublicPokeBinder",
    page_icon="游꿦",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun칞칚o para buscar todos os cards
def get_all_cards():
    try:
        result = supabase.table('cards').select('*').execute()
        return result.data if result.data else []
    except Exception as e:
        st.error(f"Erro ao buscar cards: {str(e)}")
        return []

# Fun칞칚o para buscar cards por email espec칤fico
def get_cards_by_email(user_email):
    try:
        result = supabase.table('cards').select('*').eq('user_email', user_email).execute()
        return result.data if result.data else []
    except Exception as e:
        st.error(f"Erro ao buscar cards por email: {str(e)}")
        return []

# Fun칞칚o para buscar usu치rios 칰nicos
def get_unique_users():
    try:
        result = supabase.table('cards').select('user_email').not_.is_('user_email', 'null').execute()
        if result.data:
            # Extrair emails 칰nicos
            emails = list(set([card['user_email'] for card in result.data if card['user_email']]))
            return sorted(emails)
        return []
    except Exception as e:
        st.error(f"Erro ao buscar usu치rios: {str(e)}")
        return []

# Fun칞칚o principal
def main():
    st.title("游꿦 MyPublicPokeBinder")
    st.markdown("### 游깷 Visualizador P칰blico de Cole칞칫es Pok칠mon")
    st.markdown("---")
    
    # Sidebar com filtros
    with st.sidebar:
        st.header("游댌 Filtros")
        
        # Buscar por email espec칤fico
        st.subheader("游녻 Buscar por Usu치rio")
        search_email = st.text_input("Email do usu치rio", placeholder="exemplo@email.com")
        
        if st.button("游댌 Buscar Usu치rio", use_container_width=True):
            if search_email:
                st.session_state.search_email = search_email
                st.rerun()
        
        # Limpar busca
        if st.button("游댃 Limpar Filtros", use_container_width=True):
            if 'search_email' in st.session_state:
                del st.session_state.search_email
            st.rerun()
        
        st.divider()
        
        # Lista de usu치rios dispon칤veis
        st.subheader("游논 Usu치rios Dispon칤veis")
        users = get_unique_users()
        if users:
            for user in users[:10]:  # Mostrar apenas os primeiros 10
                if st.button(f"游녻 {user}", key=f"user_{user}", use_container_width=True):
                    st.session_state.search_email = user
                    st.rerun()
            
            if len(users) > 10:
                st.caption(f"... e mais {len(users) - 10} usu치rios")
        else:
            st.info("Nenhum usu치rio encontrado")
        
        st.divider()
        
        # Estat칤sticas gerais
        st.subheader("游늵 Estat칤sticas")
        all_cards = get_all_cards()
        if all_cards:
            st.metric("Total de Cards", len(all_cards))
            st.metric("Usu치rios Ativos", len(users))
            total_value = sum(card.get('estimated_value', 0) for card in all_cards)
            st.metric("Valor Total", f"R$ {total_value:.2f}")
    
    # Conte칰do principal
    search_email = st.session_state.get('search_email', None)
    
    if search_email:
        # Mostrar cards de um usu치rio espec칤fico
        st.header(f"游꿦 Cole칞칚o de {search_email}")
        st.info(f"Visualizando cards do usu치rio: {search_email}")
        
        cards = get_cards_by_email(search_email)
        
        if not cards:
            st.warning(f"Nenhum card encontrado para {search_email}")
            st.markdown("### 游댌 Poss칤veis motivos:")
            st.markdown("""
            - O email n칚o est치 cadastrado no sistema
            - O usu치rio n칚o tem cards cadastrados
            - O usu치rio n칚o compartilhou sua cole칞칚o
            """)
        else:
            # Estat칤sticas do usu치rio
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Total de Cards", len(cards))
            with col2:
                total_value = sum(card.get('estimated_value', 0) for card in cards)
                st.metric("Valor Total", f"R$ {total_value:.2f}")
            with col3:
                languages = set(card.get('language', '') for card in cards)
                st.metric("Idiomas", len(languages))
            with col4:
                if cards:
                    most_valuable = max(cards, key=lambda x: x.get('estimated_value', 0))
                    st.metric("Card Mais Valioso", f"R$ {most_valuable.get('estimated_value', 0):.2f}")
            
            st.markdown("---")
            
            # Filtros para os cards do usu치rio
            col1, col2, col3 = st.columns(3)
            with col1:
                filter_name = st.text_input("游댌 Filtrar por nome", key="user_filter_name")
            with col2:
                filter_language = st.selectbox("游깴 Filtrar por idioma", 
                                             ["Todos"] + list(set([card.get('language', '') for card in cards])), 
                                             key="user_filter_lang")
            with col3:
                sort_by = st.selectbox("游늵 Ordenar por", 
                                     ["Nome", "N칰mero", "Valor", "Data de Cria칞칚o"], 
                                     key="user_sort")
            
            # Aplicar filtros
            filtered_cards = cards
            if filter_name:
                filtered_cards = [card for card in filtered_cards 
                                if filter_name.lower() in card.get('name', '').lower()]
            if filter_language != "Todos":
                filtered_cards = [card for card in filtered_cards 
                                if card.get('language', '') == filter_language]
            
            # Aplicar ordena칞칚o
            if sort_by == "Nome":
                filtered_cards.sort(key=lambda x: x.get('name', ''))
            elif sort_by == "N칰mero":
                filtered_cards.sort(key=lambda x: x.get('number', ''))
            elif sort_by == "Valor":
                filtered_cards.sort(key=lambda x: x.get('estimated_value', 0), reverse=True)
            elif sort_by == "Data de Cria칞칚o":
                filtered_cards.sort(key=lambda x: x.get('created_at', ''), reverse=True)
            
            # Exibir cards
            if filtered_cards:
                st.markdown(f"**Mostrando {len(filtered_cards)} de {len(cards)} cards**")
                
                cols = st.columns(4)
                for i, card in enumerate(filtered_cards):
                    with cols[i % 4]:
                        st.image(card.get('image_url', ''), width=150, use_container_width=True)
                        st.markdown(f"**{card.get('name', '')}**")
                        st.markdown(f"游늶 N췈 {card.get('number', '')}")
                        st.markdown(f"游눯 R$ {card.get('estimated_value', 0):.2f}")
                        st.markdown(f"游깴 {card.get('language', '')}")
            else:
                st.info("游댌 Nenhum card encontrado com os filtros aplicados.")
    
    else:
        # Mostrar todos os cards
        st.header("游꿦 Todas as Cole칞칫es")
        st.info("Visualizando todos os cards de todos os usu치rios")
        
        all_cards = get_all_cards()
        
        if not all_cards:
            st.warning("Nenhum card encontrado no sistema")
        else:
            # Estat칤sticas gerais
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Total de Cards", len(all_cards))
            with col2:
                total_value = sum(card.get('estimated_value', 0) for card in all_cards)
                st.metric("Valor Total", f"R$ {total_value:.2f}")
            with col3:
                languages = set(card.get('language', '') for card in all_cards)
                st.metric("Idiomas", len(languages))
            with col4:
                users = get_unique_users()
                st.metric("Usu치rios", len(users))
            
            st.markdown("---")
            
            # Filtros gerais
            col1, col2, col3 = st.columns(3)
            with col1:
                filter_name = st.text_input("游댌 Filtrar por nome", key="all_filter_name")
            with col2:
                filter_language = st.selectbox("游깴 Filtrar por idioma", 
                                             ["Todos"] + list(set([card.get('language', '') for card in all_cards])), 
                                             key="all_filter_lang")
            with col3:
                sort_by = st.selectbox("游늵 Ordenar por", 
                                     ["Nome", "N칰mero", "Valor", "Data de Cria칞칚o", "Usu치rio"], 
                                     key="all_sort")
            
            # Aplicar filtros
            filtered_cards = all_cards
            if filter_name:
                filtered_cards = [card for card in filtered_cards 
                                if filter_name.lower() in card.get('name', '').lower()]
            if filter_language != "Todos":
                filtered_cards = [card for card in filtered_cards 
                                if card.get('language', '') == filter_language]
            
            # Aplicar ordena칞칚o
            if sort_by == "Nome":
                filtered_cards.sort(key=lambda x: x.get('name', ''))
            elif sort_by == "N칰mero":
                filtered_cards.sort(key=lambda x: x.get('number', ''))
            elif sort_by == "Valor":
                filtered_cards.sort(key=lambda x: x.get('estimated_value', 0), reverse=True)
            elif sort_by == "Data de Cria칞칚o":
                filtered_cards.sort(key=lambda x: x.get('created_at', ''), reverse=True)
            elif sort_by == "Usu치rio":
                filtered_cards.sort(key=lambda x: x.get('user_email', ''))
            
            # Exibir cards
            if filtered_cards:
                st.markdown(f"**Mostrando {len(filtered_cards)} de {len(all_cards)} cards**")
                
                cols = st.columns(4)
                for i, card in enumerate(filtered_cards):
                    with cols[i % 4]:
                        st.image(card.get('image_url', ''), width=150, use_container_width=True)
                        st.markdown(f"**{card.get('name', '')}**")
                        st.markdown(f"游늶 N췈 {card.get('number', '')}")
                        st.markdown(f"游눯 R$ {card.get('estimated_value', 0):.2f}")
                        st.markdown(f"游깴 {card.get('language', '')}")
                        st.markdown(f"游녻 {card.get('user_email', 'N/A')}")
            else:
                st.info("游댌 Nenhum card encontrado com os filtros aplicados.")
    
    # Footer
    st.markdown("---")
    st.markdown("### 游닇 Sobre")
    st.markdown("""
    **MyPublicPokeBinder** 칠 um visualizador p칰blico de cole칞칫es de cards Pok칠mon.
    
    - 游깷 **Acesso p칰blico** - N칚o requer login
    - 游댌 **Busca por usu치rio** - Encontre cole칞칫es espec칤ficas
    - 游늵 **Estat칤sticas** - Visualize m칠tricas das cole칞칫es
    - 游꿦 **Cards detalhados** - Veja informa칞칫es completas dos cards
    
    Para criar sua pr칩pria cole칞칚o, acesse: [MyPokeBinder](https://mypokebinder.streamlit.app/)
    """)

if __name__ == "__main__":
    main()
