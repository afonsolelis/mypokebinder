#!/usr/bin/env python3
"""
Script de inicializa√ß√£o do MyPokeBinder - Vers√£o Windows
"""

import os
import sys
import subprocess
from pathlib import Path

def print_banner():
    """Exibe o banner do MyPokeBinder"""
    print("=" * 50)
    print("MyPokeBinder - Sistema de Colecao de Cards")
    print("=" * 50)
    print()

def check_python_version():
    """Verifica a vers√£o do Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou superior √© necess√°rio")
        print(f"   Vers√£o atual: {sys.version_info.major}.{sys.version_info.minor}")
        return False
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
    return True

def check_dependencies():
    """Verifica se as depend√™ncias est√£o instaladas"""
    print("üì¶ Verificando depend√™ncias...")
    
    try:
        import streamlit
        import supabase
        import cloudinary
        import PIL
        import dotenv
        print("‚úÖ Todas as depend√™ncias est√£o instaladas")
        return True
    except ImportError as e:
        print(f"‚ùå Depend√™ncia n√£o encontrada: {e}")
        print("   Execute: pip install -r requirements.txt")
        return False

def check_env_file():
    """Verifica se o arquivo .env existe e est√° configurado"""
    print("üîß Verificando configura√ß√£o do ambiente...")
    
    env_file = Path(".env")
    if not env_file.exists():
        print("‚ùå Arquivo .env n√£o encontrado")
        print("   Copie env.example para .env e configure suas credenciais")
        return False
    
    # Carrega as vari√°veis
    from dotenv import load_dotenv
    load_dotenv()
    
    required_vars = [
        'SUPABASE_URL',
        'SUPABASE_KEY', 
        'CLOUDINARY_CLOUD_NAME',
        'CLOUDINARY_API_KEY',
        'CLOUDINARY_API_SECRET'
    ]
    
    missing_vars = []
    for var in required_vars:
        value = os.getenv(var)
        if not value or value.startswith('your_') or value.startswith('placeholder'):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Vari√°veis n√£o configuradas: {', '.join(missing_vars)}")
        print("   Configure todas as vari√°veis no arquivo .env")
        return False
    
    print("‚úÖ Arquivo .env configurado corretamente")
    return True

def test_connections():
    """Testa as conex√µes com Cloudinary e Supabase"""
    print("üîó Testando conex√µes...")
    
    try:
        # Testar Cloudinary
        from cloudinary_config import validate_cloudinary_connection
        cloudinary_ok = validate_cloudinary_connection()
        
        if cloudinary_ok:
            print("‚úÖ Conex√£o com Cloudinary: OK")
        else:
            print("‚ùå Conex√£o com Cloudinary: Falhou")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao testar Cloudinary: {e}")
        return False
    
    try:
        # Testar Supabase
        from config import supabase
        # Tenta uma opera√ß√£o simples
        result = supabase.auth.get_user()
        print("‚úÖ Conex√£o com Supabase: OK")
    except Exception as e:
        print(f"‚ùå Erro ao testar Supabase: {e}")
        return False
    
    return True

def check_database():
    """Verifica se o banco de dados est√° configurado"""
    print("üóÑÔ∏è Verificando banco de dados...")
    
    try:
        from config import supabase
        
        # Tenta buscar a tabela cards
        result = supabase.table('cards').select('id').limit(1).execute()
        print("‚úÖ Tabela 'cards' encontrada")
        return True
        
    except Exception as e:
        print("‚ùå Tabela 'cards' n√£o encontrada")
        print("   Execute o SQL no Supabase SQL Editor:")
        print("   - V√° para o SQL Editor do Supabase")
        print("   - Execute o conte√∫do do arquivo 'supabase_setup.sql'")
        return False

def start_app():
    """Inicia o aplicativo Streamlit"""
    print("üöÄ Iniciando o aplicativo...")
    print()
    print("üì± O aplicativo estar√° dispon√≠vel em: http://localhost:8501")
    print("üîÑ Para parar, pressione Ctrl+C")
    print()
    
    try:
        subprocess.run([sys.executable, "-m", "streamlit", "run", "app.py"])
    except KeyboardInterrupt:
        print("\nüëã Aplicativo encerrado pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro ao iniciar aplicativo: {e}")

def main():
    """Fun√ß√£o principal"""
    print_banner()
    
    # Verifica√ß√µes
    checks = [
        ("Vers√£o do Python", check_python_version),
        ("Depend√™ncias", check_dependencies),
        ("Configura√ß√£o do ambiente", check_env_file),
        ("Conex√µes", test_connections),
        ("Banco de dados", check_database)
    ]
    
    all_passed = True
    for check_name, check_func in checks:
        print(f"\nüîç {check_name}...")
        if not check_func():
            all_passed = False
            break
    
    if all_passed:
        print("\nüéâ Todas as verifica√ß√µes passaram!")
        print("üöÄ Iniciando o MyPokeBinder...")
        start_app()
    else:
        print("\n‚ö†Ô∏è Algumas verifica√ß√µes falharam.")
        print("üìñ Consulte a documenta√ß√£o para resolver os problemas:")
        print("   - README.md")
        print("   - SETUP_GUIDE.md")
        sys.exit(1)

if __name__ == "__main__":
    main()
