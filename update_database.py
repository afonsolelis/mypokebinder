#!/usr/bin/env python3
"""
Script para atualizar o banco de dados e adicionar a coluna user_email
"""
import os
from dotenv import load_dotenv
from supabase import create_client, Client

# Carregar vari√°veis de ambiente
load_dotenv()

# Configura√ß√µes do Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# Inicializar cliente Supabase
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

def add_user_email_column():
    """Adiciona a coluna user_email na tabela cards"""
    try:
        # SQL para adicionar a coluna user_email
        sql = """
        ALTER TABLE cards 
        ADD COLUMN IF NOT EXISTS user_email TEXT;
        """
        
        # Executar via RPC
        result = supabase.rpc('exec_sql', {'sql': sql}).execute()
        print("‚úÖ Coluna user_email adicionada com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao adicionar coluna: {str(e)}")
        return False

def update_existing_cards():
    """Atualiza cards existentes com o email do usu√°rio"""
    try:
        # Buscar todos os cards que n√£o t√™m user_email
        result = supabase.table('cards').select('*').is_('user_email', 'null').execute()
        
        if not result.data:
            print("‚úÖ Todos os cards j√° t√™m user_email!")
            return True
        
        print(f"üìù Encontrados {len(result.data)} cards para atualizar...")
        
        # Para cada card, tentar buscar o email do usu√°rio
        updated_count = 0
        for card in result.data:
            try:
                # Buscar informa√ß√µes do usu√°rio pelo user_id
                # Como n√£o temos acesso direto aos usu√°rios, vamos pular por enquanto
                # Em uma implementa√ß√£o futura, poder√≠amos usar a API de admin
                print(f"‚ö†Ô∏è Card {card['id']} precisa de email do usu√°rio {card['user_id']}")
                
            except Exception as e:
                print(f"‚ùå Erro ao atualizar card {card['id']}: {str(e)}")
        
        print(f"üìä {updated_count} cards atualizados")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar cards: {str(e)}")
        return False

def main():
    print("üîß Atualizando banco de dados...")
    print("=" * 50)
    
    # Adicionar coluna user_email
    if add_user_email_column():
        # Atualizar cards existentes
        update_existing_cards()
    
    print("=" * 50)
    print("‚úÖ Atualiza√ß√£o conclu√≠da!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Os novos cards ter√£o o email automaticamente")
    print("2. Para cards existentes, voc√™ pode:")
    print("   - Deletar e recriar os cards")
    print("   - Ou atualizar manualmente no Supabase")
    print("3. Teste a funcionalidade de p√°ginas p√∫blicas!")

if __name__ == "__main__":
    main()
